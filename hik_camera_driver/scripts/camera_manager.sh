#!/bin/bash

# Êµ∑Â∫∑Â®ÅËßÜÁõ∏Êú∫Á≥ªÁªüÁÆ°ÁêÜËÑöÊú¨ üöÄ
# ÂäüËÉΩ: ÂêØÂä®„ÄÅÊµãËØï„ÄÅÂÆâË£Ö‰æùËµñ„ÄÅÊ∏ÖÁêÜÁ≥ªÁªü

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ÈªòËÆ§ÂèÇÊï∞
CAMERA_IP=""
CAMERA_SERIAL=""
TOPIC_NAME="/image_raw"
FRAME_RATE=30.0
EXPOSURE_TIME=1000.0
GAIN=1.0
PIXEL_FORMAT="bgr8"
AUTO_RECONNECT=true
RECONNECT_INTERVAL=5
USE_RVIZ=true
MONITOR_FPS=true

# ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
show_help() {
    echo -e "${BLUE}Êµ∑Â∫∑Â®ÅËßÜÁõ∏Êú∫Á≥ªÁªüÁÆ°ÁêÜËÑöÊú¨${NC}"
    echo ""
    echo "Áî®Ê≥ï: $0 [ÂëΩ‰ª§] [ÈÄâÈ°π]"
    echo ""
    echo "ÂëΩ‰ª§:"
    echo "  start     ÂêØÂä®ÂÆåÊï¥Áõ∏Êú∫Á≥ªÁªü"
    echo "  test      ÊµãËØïÁ≥ªÁªüÂäüËÉΩ"
    echo "  install   ÂÆâË£Ö‰æùËµñ"
    echo "  clean     Ê∏ÖÁêÜÊûÑÂª∫Êñá‰ª∂"
    echo "  status    Êü•ÁúãÁ≥ªÁªüÁä∂ÊÄÅ"
    echo "  help      ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ"
    echo ""
    echo "ÈÄâÈ°π:"
    echo "  -i, --ip IPÂú∞ÂùÄ              Áõ∏Êú∫IPÂú∞ÂùÄ"
    echo "  -s, --serial Â∫èÂàóÂè∑           Áõ∏Êú∫Â∫èÂàóÂè∑"
    echo "  -t, --topic ËØùÈ¢òÂêç            ÂõæÂÉèËØùÈ¢òÂêçÁß∞"
    echo "  -f, --fps Â∏ßÁéá                ËÆæÂÆöÂ∏ßÁéá"
    echo "  -e, --exposure ÊõùÂÖâÊó∂Èó¥       ÊõùÂÖâÊó∂Èó¥(ÂæÆÁßí)"
    echo "  -g, --gain Â¢ûÁõä               Â¢ûÁõäÂÄº"
    echo "  -p, --pixel ÂÉèÁ¥†Ê†ºÂºè          ÂÉèÁ¥†Ê†ºÂºè"
    echo "  --no-rviz                     ‰∏çÂêØÂä®RViz"
    echo "  --no-monitor                  ‰∏çÂêØÂä®Â∏ßÁéáÁõëÊéß"
    echo ""
    echo "Á§∫‰æã:"
    echo "  $0 start -i 192.168.1.100 -f 60.0"
    echo "  $0 test --no-rviz"
    echo "  $0 clean"
}

# Ê£ÄÊü•ROS2ÁéØÂ¢É
check_ros2_env() {
    if [ -z "$ROS_DISTRO" ]; then
        echo -e "${RED}‚ùå ROS2ÁéØÂ¢ÉÊú™ËÆæÁΩÆÔºåÊ≠£Âú®Âä†ËΩΩ...${NC}"
        source /opt/ros/humble/setup.bash
    fi
    
    if [ -z "$ROS_DISTRO" ]; then
        echo -e "${RED}‚ùå Êó†Ê≥ïÂä†ËΩΩROS2ÁéØÂ¢ÉÔºåËØ∑Ê£ÄÊü•ÂÆâË£Ö${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ ROS2ÁéØÂ¢É: $ROS_DISTRO${NC}"
}

# Ê£ÄÊü•Â∑•‰ΩúÁ©∫Èó¥
check_workspace() {
    if [ ! -f "install/setup.bash" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Â∑•‰ΩúÁ©∫Èó¥Êú™ÊûÑÂª∫ÔºåÊ≠£Âú®ÁºñËØë...${NC}"
        colcon build --packages-select hik_camera_driver
        if [ $? -ne 0 ]; then
            echo -e "${RED}‚ùå ÁºñËØëÂ§±Ë¥•${NC}"
            exit 1
        fi
    fi
    
    source install/setup.bash
    echo -e "${GREEN}‚úÖ Â∑•‰ΩúÁ©∫Èó¥Â∑≤Âä†ËΩΩ${NC}"
}

# ÂêØÂä®Á≥ªÁªü
start_system() {
    echo -e "${BLUE}üöÄ ÂêØÂä®Êµ∑Â∫∑Â®ÅËßÜÁõ∏Êú∫Á≥ªÁªü...${NC}"
    
    # Ê£ÄÊü•ÁéØÂ¢É
    check_ros2_env
    check_workspace
    
    # ÊûÑÂª∫ÂêØÂä®ÂèÇÊï∞
    LAUNCH_ARGS=""
    if [ -n "$CAMERA_IP" ]; then
        LAUNCH_ARGS="$LAUNCH_ARGS camera_ip:=$CAMERA_IP"
    fi
    if [ -n "$CAMERA_SERIAL" ]; then
        LAUNCH_ARGS="$LAUNCH_ARGS camera_serial:=$CAMERA_SERIAL"
    fi
    LAUNCH_ARGS="$LAUNCH_ARGS topic_name:=$TOPIC_NAME"
    LAUNCH_ARGS="$LAUNCH_ARGS frame_rate:=$FRAME_RATE"
    LAUNCH_ARGS="$LAUNCH_ARGS exposure_time:=$EXPOSURE_TIME"
    LAUNCH_ARGS="$LAUNCH_ARGS gain:=$GAIN"
    LAUNCH_ARGS="$LAUNCH_ARGS pixel_format:=$PIXEL_FORMAT"
    LAUNCH_ARGS="$LAUNCH_ARGS auto_reconnect:=$AUTO_RECONNECT"
    LAUNCH_ARGS="$LAUNCH_ARGS reconnect_interval:=$RECONNECT_INTERVAL"
    LAUNCH_ARGS="$LAUNCH_ARGS use_rviz:=$USE_RVIZ"
    LAUNCH_ARGS="$LAUNCH_ARGS monitor_fps:=$MONITOR_FPS"
    
    echo -e "${CYAN}üìã ÂêØÂä®ÂèÇÊï∞:${NC}"
    echo "  Áõ∏Êú∫IP: $CAMERA_IP"
    echo "  Áõ∏Êú∫Â∫èÂàóÂè∑: $CAMERA_SERIAL"
    echo "  ËØùÈ¢òÂêçÁß∞: $TOPIC_NAME"
    echo "  Â∏ßÁéá: $FRAME_RATE FPS"
    echo "  ÊõùÂÖâÊó∂Èó¥: $EXPOSURE_TIME Œºs"
    echo "  Â¢ûÁõä: $GAIN"
    echo "  ÂÉèÁ¥†Ê†ºÂºè: $PIXEL_FORMAT"
    echo "  Ëá™Âä®ÈáçËøû: $AUTO_RECONNECT"
    echo "  ÂêØÂä®RViz: $USE_RVIZ"
    echo "  Â∏ßÁéáÁõëÊéß: $MONITOR_FPS"
    echo ""
    
    # ÂêØÂä®Á≥ªÁªü
    echo -e "${BLUE}üé¨ ÂêØÂä®Á≥ªÁªü...${NC}"
    ros2 launch hik_camera_driver hik_camera_system.launch.py $LAUNCH_ARGS
}

# ÊµãËØïÁ≥ªÁªü
test_system() {
    echo -e "${BLUE}üß™ ÊµãËØïÊµ∑Â∫∑Â®ÅËßÜÁõ∏Êú∫Á≥ªÁªü...${NC}"
    
    # Ê£ÄÊü•ÁéØÂ¢É
    check_ros2_env
    check_workspace
    
    # ÊµãËØï1: ÁºñËØëÊµãËØï
    echo -e "${YELLOW}üìã ÊµãËØï1: ÁºñËØëÊµãËØï...${NC}"
    colcon build --packages-select hik_camera_driver
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ ÁºñËØëÊàêÂäü${NC}"
    else
        echo -e "${RED}‚ùå ÁºñËØëÂ§±Ë¥•${NC}"
        return 1
    fi
    
    # ÊµãËØï2: ËäÇÁÇπÂêØÂä®ÊµãËØï
    echo -e "${YELLOW}üìã ÊµãËØï2: ËäÇÁÇπÂêØÂä®ÊµãËØï...${NC}"
    ros2 run hik_camera_driver hik_camera_node --ros-args -p topic_name:="/test_image" &
    NODE_PID=$!
    sleep 3
    
    if ps -p $NODE_PID > /dev/null; then
        echo -e "${GREEN}‚úÖ Áõ∏Êú∫ËäÇÁÇπÂêØÂä®ÊàêÂäü${NC}"
        kill $NODE_PID 2>/dev/null
    else
        echo -e "${RED}‚ùå Áõ∏Êú∫ËäÇÁÇπÂêØÂä®Â§±Ë¥•${NC}"
        return 1
    fi
    
    # ÊµãËØï3: Â∏ßÁéáÁõëÊéßÊµãËØï
    echo -e "${YELLOW}üìã ÊµãËØï3: Â∏ßÁéáÁõëÊéßÊµãËØï...${NC}"
    ros2 run hik_camera_driver fps_monitor_node --ros-args -p monitor_topic:="/test_image" &
    MONITOR_PID=$!
    sleep 2
    
    if ps -p $MONITOR_PID > /dev/null; then
        echo -e "${GREEN}‚úÖ Â∏ßÁéáÁõëÊéßËäÇÁÇπÂêØÂä®ÊàêÂäü${NC}"
        kill $MONITOR_PID 2>/dev/null
    else
        echo -e "${RED}‚ùå Â∏ßÁéáÁõëÊéßËäÇÁÇπÂêØÂä®Â§±Ë¥•${NC}"
        return 1
    fi
    
    # ÊµãËØï4: ÂèÇÊï∞‰ø°ÊÅØÊµãËØï
    echo -e "${YELLOW}üìã ÊµãËØï4: ÂèÇÊï∞‰ø°ÊÅØÊµãËØï...${NC}"
    ros2 run hik_camera_driver param_info_node --ros-args -p target_node_name:="hik_camera_driver" &
    PARAM_PID=$!
    sleep 2
    
    if ps -p $PARAM_PID > /dev/null; then
        echo -e "${GREEN}‚úÖ ÂèÇÊï∞‰ø°ÊÅØËäÇÁÇπÂêØÂä®ÊàêÂäü${NC}"
        kill $PARAM_PID 2>/dev/null
    else
        echo -e "${RED}‚ùå ÂèÇÊï∞‰ø°ÊÅØËäÇÁÇπÂêØÂä®Â§±Ë¥•${NC}"
        return 1
    fi
    
    # ÊµãËØï5: ÂèÇÊï∞ÊµãËØï
    echo -e "${YELLOW}üìã ÊµãËØï5: ÂèÇÊï∞ÊµãËØï...${NC}"
    ros2 run hik_camera_driver hik_camera_node --ros-args -p frame_rate:=15.0 -p exposure_time:=2000.0 &
    NODE_PID=$!
    sleep 3
    
    if ps -p $NODE_PID > /dev/null; then
        echo -e "${GREEN}‚úÖ ÂèÇÊï∞ËÆæÁΩÆÊàêÂäü${NC}"
        kill $NODE_PID 2>/dev/null
    else
        echo -e "${RED}‚ùå ÂèÇÊï∞ËÆæÁΩÆÂ§±Ë¥•${NC}"
        return 1
    fi
    
    echo -e "${GREEN}üéâ ÊâÄÊúâÊµãËØïÈÄöËøáÔºÅ${NC}"
}

# ÂÆâË£Ö‰æùËµñ
install_dependencies() {
    echo -e "${BLUE}üì¶ ÂÆâË£ÖÁ≥ªÁªü‰æùËµñ...${NC}"
    
    # Êõ¥Êñ∞ÂåÖÂàóË°®
    echo -e "${YELLOW}üìã Êõ¥Êñ∞ÂåÖÂàóË°®...${NC}"
    sudo apt update
    
    # ÂÆâË£ÖROS2‰æùËµñ
    echo -e "${YELLOW}üìã ÂÆâË£ÖROS2‰æùËµñ...${NC}"
    sudo apt install -y \
        ros-humble-cv-bridge \
        ros-humble-image-transport \
        ros-humble-rviz2 \
        ros-humble-sensor-msgs \
        ros-humble-std-msgs
    
    # ÂÆâË£ÖOpenCV
    echo -e "${YELLOW}üìã ÂÆâË£ÖOpenCV...${NC}"
    sudo apt install -y \
        libopencv-dev \
        python3-opencv
    
    # ÂÆâË£ÖÁºñËØëÂ∑•ÂÖ∑
    echo -e "${YELLOW}üìã ÂÆâË£ÖÁºñËØëÂ∑•ÂÖ∑...${NC}"
    sudo apt install -y \
        build-essential \
        cmake \
        git
    
    echo -e "${GREEN}‚úÖ ‰æùËµñÂÆâË£ÖÂÆåÊàê${NC}"
}

# Ê∏ÖÁêÜÁ≥ªÁªü
clean_system() {
    echo -e "${BLUE}üßπ Ê∏ÖÁêÜÊûÑÂª∫Êñá‰ª∂...${NC}"
    
    # ÂÅúÊ≠¢ÊâÄÊúâÁõ∏ÂÖ≥ËøõÁ®ã
    echo -e "${YELLOW}üìã ÂÅúÊ≠¢Áõ∏ÂÖ≥ËøõÁ®ã...${NC}"
    pkill -f "hik_camera_driver" 2>/dev/null
    pkill -f "fps_monitor" 2>/dev/null
    pkill -f "param_info" 2>/dev/null
    pkill -f "rviz2" 2>/dev/null
    
    # Ê∏ÖÁêÜÊûÑÂª∫ÁõÆÂΩï
    echo -e "${YELLOW}üìã Ê∏ÖÁêÜÊûÑÂª∫ÁõÆÂΩï...${NC}"
    rm -rf build/ install/ log/
    
    echo -e "${GREEN}‚úÖ Ê∏ÖÁêÜÂÆåÊàê${NC}"
}

# Êü•ÁúãÁ≥ªÁªüÁä∂ÊÄÅ
show_status() {
    echo -e "${BLUE}üìä Á≥ªÁªüÁä∂ÊÄÅÊ£ÄÊü•...${NC}"
    
    # Ê£ÄÊü•ROS2ÁéØÂ¢É
    if [ -n "$ROS_DISTRO" ]; then
        echo -e "${GREEN}‚úÖ ROS2ÁéØÂ¢É: $ROS_DISTRO${NC}"
    else
        echo -e "${RED}‚ùå ROS2ÁéØÂ¢ÉÊú™ËÆæÁΩÆ${NC}"
    fi
    
    # Ê£ÄÊü•Â∑•‰ΩúÁ©∫Èó¥
    if [ -f "install/setup.bash" ]; then
        echo -e "${GREEN}‚úÖ Â∑•‰ΩúÁ©∫Èó¥Â∑≤ÊûÑÂª∫${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Â∑•‰ΩúÁ©∫Èó¥Êú™ÊûÑÂª∫${NC}"
    fi
    
    # Ê£ÄÊü•ËøêË°å‰∏≠ÁöÑËäÇÁÇπ
    echo -e "${CYAN}üìã ËøêË°å‰∏≠ÁöÑËäÇÁÇπ:${NC}"
    ros2 node list 2>/dev/null | grep -E "(hik_camera|fps_monitor|param_info)" || echo "  Êó†Áõ∏ÂÖ≥ËäÇÁÇπËøêË°å"
    
    # Ê£ÄÊü•ËØùÈ¢ò
    echo -e "${CYAN}üìã Áõ∏ÂÖ≥ËØùÈ¢ò:${NC}"
    ros2 topic list 2>/dev/null | grep -E "(image_raw|camera_fps|param_info)" || echo "  Êó†Áõ∏ÂÖ≥ËØùÈ¢ò"
}

# Ëß£ÊûêÂëΩ‰ª§Ë°åÂèÇÊï∞
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            start)
                COMMAND="start"
                shift
                ;;
            test)
                COMMAND="test"
                shift
                ;;
            install)
                COMMAND="install"
                shift
                ;;
            clean)
                COMMAND="clean"
                shift
                ;;
            status)
                COMMAND="status"
                shift
                ;;
            help|--help|-h)
                show_help
                exit 0
                ;;
            -i|--ip)
                CAMERA_IP="$2"
                shift 2
                ;;
            -s|--serial)
                CAMERA_SERIAL="$2"
                shift 2
                ;;
            -t|--topic)
                TOPIC_NAME="$2"
                shift 2
                ;;
            -f|--fps)
                FRAME_RATE="$2"
                shift 2
                ;;
            -e|--exposure)
                EXPOSURE_TIME="$2"
                shift 2
                ;;
            -g|--gain)
                GAIN="$2"
                shift 2
                ;;
            -p|--pixel)
                PIXEL_FORMAT="$2"
                shift 2
                ;;
            --no-rviz)
                USE_RVIZ=false
                shift
                ;;
            --no-monitor)
                MONITOR_FPS=false
                shift
                ;;
            *)
                echo -e "${RED}‚ùå Êú™Áü•ÂèÇÊï∞: $1${NC}"
                show_help
                exit 1
                ;;
        esac
    done
}

# ‰∏ªÂáΩÊï∞
main() {
    # Ëß£ÊûêÂèÇÊï∞
    parse_args "$@"
    
    # Ê£ÄÊü•ÂëΩ‰ª§
    if [ -z "$COMMAND" ]; then
        echo -e "${RED}‚ùå ËØ∑ÊåáÂÆöÂëΩ‰ª§${NC}"
        show_help
        exit 1
    fi
    
    # ÊâßË°åÂëΩ‰ª§
    case $COMMAND in
        start)
            start_system
            ;;
        test)
            test_system
            ;;
        install)
            install_dependencies
            ;;
        clean)
            clean_system
            ;;
        status)
            show_status
            ;;
        *)
            echo -e "${RED}‚ùå Êú™Áü•ÂëΩ‰ª§: $COMMAND${NC}"
            show_help
            exit 1
            ;;
    esac
}

# ËøêË°å‰∏ªÂáΩÊï∞
main "$@"
